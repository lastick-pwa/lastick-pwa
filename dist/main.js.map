{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/config.service.ts","webpack:///./src/app/control-push/control-push.component.css","webpack:///./src/app/control-push/control-push.component.html","webpack:///./src/app/control-push/control-push.component.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/post-tweet/post-tweet.component.css","webpack:///./src/app/post-tweet/post-tweet.component.html","webpack:///./src/app/post-tweet/post-tweet.component.ts","webpack:///./src/app/push.service.ts","webpack:///./src/app/tweet-feeds/tweet-feeds.component.css","webpack:///./src/app/tweet-feeds/tweet-feeds.component.html","webpack:///./src/app/tweet-feeds/tweet-feeds.component.ts","webpack:///./src/app/tweet-list/tweet-list.component.css","webpack:///./src/app/tweet-list/tweet-list.component.html","webpack:///./src/app/tweet-list/tweet-list.component.ts","webpack:///./src/app/tweet.service.ts","webpack:///./src/app/window-ref.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<mat-sidenav-container class=\\\"mat-typography\\\">\\n  <mat-sidenav #sidenav>\\n\\n    <mat-toolbar color=\\\"accent\\\">\\n\\n      <img src=\\\"assets/images/logo.png\\\" class=\\\"logo\\\" alt=\\\"{{title}}\\\" />\\n\\n    </mat-toolbar>\\n\\n    <mat-nav-list>\\n      <mat-list-item>\\n        <mat-icon mat-list-icon>folder</mat-icon>\\n        <a matLine>Dashboard</a>\\n      </mat-list-item>\\n      <mat-list-item>\\n        <mat-icon mat-list-icon>folder</mat-icon>\\n        <a matLine>Logout</a>\\n      </mat-list-item>\\n    </mat-nav-list>\\n\\n  </mat-sidenav>\\n\\n  <mat-toolbar color=\\\"primary\\\">\\n    <span>\\n      <button mat-icon-button (click)=\\\"sidenav.open()\\\">\\n        <mat-icon>menu</mat-icon>\\n      </button>\\n\\n    </span>\\n    <span>{{title}}</span>\\n\\n  </mat-toolbar>\\n\\n  <div class=\\\"content\\\">\\n\\n    <mat-tab-group>\\n      <mat-tab label=\\\"Background Sync\\\">\\n\\n        <app-post-tweet></app-post-tweet>\\n\\n      </mat-tab>\\n      <mat-tab label=\\\"Push Notifications\\\">\\n\\n        <app-control-push></app-control-push>\\n\\n      </mat-tab>\\n    </mat-tab-group>\\n\\n    <app-tweet-feeds></app-tweet-feeds>\\n\\n  </div>\\n\\n</mat-sidenav-container>\"","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\n\nimport { WindowRef } from './window-ref';\n\ndeclare const BroadcastChannel;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'PWAtter';\n\n  constructor(public snackBar: MatSnackBar, private winRef: WindowRef) { }\n\n  ngOnInit() {\n\n    this.subscribeToUpdates()\n\n  }\n\n  subscribeToUpdates() {\n\n    const updateChannel = new BroadcastChannel('pwatter-channel');\n\n    updateChannel.addEventListener('message', event => {\n\n      console.log(`[App] Cache updated: ${event.data.payload.updatedUrl}`);\n\n      let snackBarRef = this.snackBar.open('Newer version of the app is available', 'Refresh');\n\n      snackBarRef.onAction().subscribe(() => {\n        this.winRef.nativeWindow.location.reload()\n      });\n\n    });\n\n  }\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { MaterialModule } from './material.module';\nimport 'hammerjs';\n\nimport { AppComponent } from './app.component';\n\nimport { ConfigService } from './config.service';\nimport { PushService } from './push.service';\nimport { TweetService } from './tweet.service';\n\nimport { TweetListComponent } from './tweet-list/tweet-list.component';\nimport { TweetFeedsComponent } from './tweet-feeds/tweet-feeds.component';\n\nimport { PostTweetComponent } from './post-tweet/post-tweet.component';\nimport { ControlPushComponent } from './control-push/control-push.component';\n\nimport { WindowRef } from './window-ref';\n\nexport function initConfiguration(configService: ConfigService): Function {\n  return () => configService.load();\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TweetListComponent,\n    ControlPushComponent,\n    TweetFeedsComponent,\n    PostTweetComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    FormsModule,\n    MaterialModule\n  ],\n  providers: [\n    ConfigService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initConfiguration,\n      deps: [ConfigService],\n      multi: true\n    },\n    TweetService,\n    PushService,\n    WindowRef\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/forkJoin';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/throw';\n\nimport { environment } from './../environments/environment';\n\n@Injectable()\nexport class ConfigService {\n\n    private configUrl = environment.production ? './assets/config/config.prod.json' : './assets/config/config.dev.json';\n\n    private _config: any;\n\n    constructor(private httpClient: HttpClient) {\n    }\n\n    load(): Promise<any> {\n\n        let promise: Promise<any> = new Promise((resolve: any) => {\n\n            this.callApi(this.configUrl)\n                .subscribe(config => {\n                    this._config = config;\n                    resolve(true)\n                });\n        });\n        return promise;\n    }\n\n    getConfig(key: any) {\n        return this._config[key];\n    }\n\n    private handleError(error: Response | any) {\n        let errMsg: string;\n        if (error instanceof Response) {\n            let body = {}\n            try {\n                body = error.json();\n            } catch (e) {\n            }\n            const err = body['error'] || JSON.stringify(body);\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n\n        console.error(errMsg);\n\n        return Observable.throw(errMsg);\n    }\n\n    callApi(url: string): Observable<any> {\n\n        return this.httpClient\n            .get(url)\n            .catch(this.handleError);\n    }\n}","module.exports = \"\"","module.exports = \"<mat-card>\\n\\n  <mat-card-actions>\\n    <button mat-raised-button (click)=\\\"subscribeToPush()\\\">\\n      <mat-icon>notifications_active</mat-icon>Subscribe for push</button>\\n    <button mat-raised-button (click)=\\\"unsubscribeFromPush()\\\">\\n      <mat-icon>notifications_off</mat-icon>Unsubscribe</button>\\n  </mat-card-actions>\\n\\n</mat-card>\\n\\n<app-tweet-list [tweets]=\\\"tweets\\\"></app-tweet-list>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Tweet } from '../tweet'\n\nimport { ConfigService } from './../config.service';\nimport { PushService } from './../push.service';\n\n@Component({\n  selector: 'app-control-push',\n  templateUrl: './control-push.component.html',\n  styleUrls: ['./control-push.component.css']\n})\nexport class ControlPushComponent implements OnInit {\n\n  private VAPID_PUBLIC_KEY: string;\n  private snackBarDuration: number = 2000\n  private swScope: string = './';\n\n  tweets = []\n\n  constructor(private pushService: PushService, public snackBar: MatSnackBar, private configService: ConfigService) {\n  }\n\n  ngOnInit() {\n    this.VAPID_PUBLIC_KEY = this.configService.getConfig('VAPID_PUBLIC_KEY')\n  }\n\n  subscribeToPush() {\n\n    let convertedVapidKey = this.pushService.urlBase64ToUint8Array(this.VAPID_PUBLIC_KEY);\n\n    navigator['serviceWorker']\n      .getRegistration(this.swScope)\n      .then(registration => {\n\n        registration.pushManager\n          .subscribe({ userVisibleOnly: true, applicationServerKey: convertedVapidKey })\n          .then(pushSubscription => {\n\n            this.pushService.addSubscriber(pushSubscription)\n              .subscribe(\n\n                res => {\n                  console.log('[App] Add subscriber request answer', res)\n\n                  let snackBarRef = this.snackBar.open('Now you are subscribed', null, {\n                    duration: this.snackBarDuration\n                  });\n                },\n                err => {\n                  console.error('[App] Add subscriber request failed', err)\n                }\n\n              )\n\n          });\n\n      })\n      .catch(err => {\n        console.error(err);\n      })\n\n\n  }\n\n  unsubscribeFromPush() {\n\n    navigator['serviceWorker']\n      .getRegistration(this.swScope)\n      .then(registration => {\n\n        registration.pushManager\n          .getSubscription()\n          .then(pushSubscription => {\n\n            this.pushService.deleteSubscriber(pushSubscription)\n              .subscribe(\n\n                res => {\n                  console.log('[App] Delete subscriber request answer', res)\n\n                  let snackBarRef = this.snackBar.open('Now you are unsubscribed', null, {\n                    duration: this.snackBarDuration\n                  });\n\n                  // Unsubscribe current client (browser)\n\n                  pushSubscription.unsubscribe()\n                    .then(success => {\n                      console.log('[App] Unsubscription successful', success)\n                    })\n                    .catch(err => {\n                      console.log('[App] Unsubscription failed', err)\n                    })\n\n                },\n                err => {\n                  console.error('[App] Delete subscription request failed', err)\n                }\n\n              )\n          })\n\n      })\n      .catch(err => {\n        console.error(err);\n      })\n\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { MatButtonModule, MatCheckboxModule, MatToolbarModule, MatCardModule, MatInputModule, MatSelectModule, MatMenuModule, MatSidenavModule, MatListModule, MatIconModule, MatSlideToggleModule, MatSnackBarModule, MatTabsModule, MatProgressBarModule, MatRadioModule, MatProgressSpinnerModule } from '@angular/material';\n\n@NgModule({\n    imports: [\n        MatButtonModule,\n        MatCheckboxModule,\n        MatToolbarModule,\n        MatCardModule,\n        MatInputModule,\n        MatSelectModule,\n        MatMenuModule,\n        MatSidenavModule,\n        MatListModule,\n        MatIconModule,\n        MatSlideToggleModule,\n        MatSnackBarModule,\n        MatTabsModule,\n        MatProgressBarModule,\n        MatRadioModule,\n        MatProgressSpinnerModule\n    ],\n    exports: [\n        MatButtonModule,\n        MatCheckboxModule,\n        MatToolbarModule,\n        MatCardModule,\n        MatInputModule,\n        MatSelectModule,\n        MatMenuModule,\n        MatSidenavModule,\n        MatListModule,\n        MatIconModule,\n        MatSlideToggleModule,\n        MatSnackBarModule,\n        MatTabsModule,\n        MatProgressBarModule,\n        MatRadioModule,\n        MatProgressSpinnerModule\n    ],\n})\nexport class MaterialModule { }","module.exports = \"\"","module.exports = \"<mat-card>\\n  <mat-card-header>\\n    <mat-icon mat-card-avatar>sync</mat-icon>\\n    <mat-card-title>Background Sync</mat-card-title>\\n    <mat-card-subtitle>Defer actions until the user has stable connectivity</mat-card-subtitle>\\n  </mat-card-header>\\n  <mat-card-content>\\n\\n    <form #messageForm=\\\"ngForm\\\" novalidate (submit)=\\\"messageFormSubmit(messageForm)\\\">\\n\\n      <mat-input-container style=\\\"width: 300px;\\\">\\n        <input matInput placeholder=\\\"Message\\\" value=\\\"\\\" type=\\\"text\\\" required ngModel #messageRef name=\\\"message\\\">\\n        <div *ngIf=\\\"messageRef.errors?.required && messageRef.touched\\\" class=\\\"error\\\">\\n          Message is required\\n        </div>\\n      </mat-input-container>\\n\\n      <button mat-raised-button color=\\\"accent\\\" type=\\\"submit\\\"><mat-icon>message</mat-icon>Post!</button>\\n      \\n    </form>\\n\\n  </mat-card-content>\\n\\n</mat-card>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { Tweet } from '../tweet'\nimport { TweetService } from './../tweet.service';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'app-post-tweet',\n  templateUrl: './post-tweet.component.html',\n  styleUrls: ['./post-tweet.component.css']\n})\nexport class PostTweetComponent implements OnInit {\n\n  message;\n  private snackBarDuration: number = 2000;\n  subscription: Subscription;\n  \n\n  constructor(private tweetService: TweetService, public snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n  }\n\n  messageFormSubmit(messageForm: any) {\n\n    if (messageForm.valid) {\n\n      this.subscription = this.tweetService.postTweet(messageForm.value.message).subscribe(\n        res => {\n          console.log('[App] Tweet was posted', res)\n          let snackBarRef = this.snackBar.open('Tweet was posted', null, {\n            duration: this.snackBarDuration\n          });\n        },\n        err => {\n          let snackBarRef = this.snackBar.open('Tweet will be posted after you go online', null, {\n            duration: this.snackBarDuration\n          });\n        });\n\n      messageForm.reset()\n\n    }\n\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/throw';\n\nimport { ConfigService } from './config.service';\n\n@Injectable()\nexport class PushService {\n\n  private API_URL: string\n\n  constructor(private http: HttpClient, private configService: ConfigService) {\n    this.API_URL = this.configService.getConfig('API_URL')\n  }\n\n  urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n\n  addSubscriber(subscription) {\n\n    const url = `${this.API_URL}/webpush`;\n    console.log('[Push Service] Adding subscriber')\n\n    let body = {\n      action: 'subscribe',\n      subscription: subscription\n    }\n\n    return this.http\n      .post(url, body)\n      .catch(this.handleError);\n  }\n\n  deleteSubscriber(subscription) {\n\n    const url = `${this.API_URL}/webpush`;\n    console.log('[Push Service] Deleting subscriber')\n\n    let body = {\n      action: 'unsubscribe',\n      subscription: subscription\n    }\n\n    return this.http\n      .post(url, body)\n      .catch(this.handleError);\n  }\n\n  private handleError(error: Response | any) {\n    let errMsg: string;\n    if (error instanceof Response) {\n      errMsg = `${error.statusText || 'Network error'}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return Observable.throw(errMsg);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<mat-card>\\n  <mat-card-header>\\n    <mat-icon mat-card-avatar>grade</mat-icon>\\n    <mat-card-title>Tweets</mat-card-title>\\n    <mat-card-subtitle>Choose between your timeline or favorites</mat-card-subtitle>\\n  </mat-card-header>\\n  <mat-card-actions>\\n    <button mat-button color=\\\"accent\\\" (click)=\\\"loadTimeLine()\\\"><mat-icon>list</mat-icon>Load my timeline</button>\\n    <button mat-button color=\\\"accent\\\" (click)=\\\"loadFavorites()\\\"><mat-icon>favorite</mat-icon>Load my favorites</button>\\n  </mat-card-actions>\\n  <mat-card-content>\\n\\n    <div *ngIf=\\\"tweets$ | async; else loading; let tweets\\\">\\n\\n      <app-tweet-list [tweets]=\\\"tweets\\\"></app-tweet-list>\\n\\n    </div>\\n\\n    <ng-template #loading>\\n      <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"isInteractionStarted\\\"></mat-progress-bar>\\n    </ng-template>\\n\\n  </mat-card-content>\\n\\n</mat-card>\\n\"","import { Observable } from 'rxjs/Observable';\nimport { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material';\n\nimport { Tweet } from '../tweet'\nimport { TweetService } from './../tweet.service';\n\n@Component({\n  selector: 'app-tweet-feeds',\n  templateUrl: './tweet-feeds.component.html',\n  styleUrls: ['./tweet-feeds.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TweetFeedsComponent implements OnInit {\n\n  private snackBarDuration: number = 2000\n  isInteractionStarted: boolean = false\n\n  tweets$: Observable<Tweet[]>\n\n  constructor(private tweetService: TweetService, public snackBar: MatSnackBar) { }\n\n  ngOnInit() {\n  }\n\n  loadTimeLine() {\n\n    this.isInteractionStarted = true\n\n    this.tweets$ = this.tweetService\n      .getTimelineTweets()\n      .catch((err): any => {\n        let snackBarRef = this.snackBar.open(err, null, {\n          duration: this.snackBarDuration\n        });\n      })\n\n  }\n\n  loadFavorites() {\n\n    this.isInteractionStarted = true\n\n    this.tweets$ = this.tweetService\n      .getFavoriteTweets()\n      .catch((err): any => {\n        let snackBarRef = this.snackBar.open(err, null, {\n          duration: this.snackBarDuration\n        });\n      })\n\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<mat-nav-list *ngIf=\\\"tweets\\\">\\n  <a mat-list-item *ngFor=\\\"let tweet of tweets\\\" href=\\\"{{ 'https://twitter.com/statuses/' + tweet.id_str }}\\\">\\n    <h3 matLine>{{tweet.user.name}}</h3>\\n    <p matLine>\\n      <span>{{tweet.text}}</span>\\n    </p>\\n    <p matLine>\\n      <small><mat-icon>favorite</mat-icon> {{tweet.favorite_count || 0}} &nbsp; <mat-icon>autorenew</mat-icon> {{tweet.retweet_count || 0}}</small>\\n    </p>\\n  </a>\\n</mat-nav-list>\\n\"","import { Observable } from 'rxjs/Observable';\nimport { Component, OnInit, Input } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material';\n\nimport { Tweet } from '../tweet'\nimport { TweetService } from './../tweet.service';\n\n@Component({\n  selector: 'app-tweet-list',\n  templateUrl: './tweet-list.component.html',\n  styleUrls: ['./tweet-list.component.css']\n})\nexport class TweetListComponent implements OnInit {\n\n  @Input()\n  tweets: Tweet[];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/throw';\n\nimport { ConfigService } from './config.service';\n\nimport { Tweet } from './tweet'\n\n@Injectable()\nexport class TweetService {\n\n  private API_URL: string\n\n  constructor(private http: HttpClient, private configService: ConfigService) {\n    this.API_URL = this.configService.getConfig('API_URL')\n  }\n\n  getTimelineTweets(): Observable<any> {\n    const url = `${this.API_URL}/timeline`;\n    console.log('[Tweet Service] Requesting timeline')\n    return this.http\n      .get(url)\n      .catch(this.handleError);\n\n  }\n\n  getFavoriteTweets(): Observable<any> {\n    const url = `${this.API_URL}/favorites`;\n    console.log('[Tweet Service] Requesting favorites')\n    return this.http\n      .get(url)\n      .catch(this.handleError);\n  }\n\n  postTweet(message: string): Observable<any> {\n    const url = `${this.API_URL}/post-tweet`;\n    console.log('[Tweet Service] Posting tweet')\n\n    return this.http\n      .post(url, { message })\n      .catch(this.handleError);\n  }\n\n  private handleError(error: Response | any) {\n    let errMsg: string;\n    if (error instanceof Response) {\n      errMsg = `${error.statusText || 'Network error'}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return Observable.throw(errMsg);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nfunction _window(): any {\n    // return the native window obj\n    return window;\n}\n\n@Injectable()\nexport class WindowRef {\n\n    get nativeWindow(): any {\n        return _window();\n    }\n\n}","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .then(() => {\n    //registerServiceWorker('sw')\n    //This is not Angular Service Worker workshop, this is why we register SW in index.html\n  });\n\nfunction registerServiceWorker(swName: string) {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker\n      .register(`/${swName}.js`)\n      .then(reg => {\n        console.log('[App] Successful service worker registration', reg);\n      })\n      .catch(err =>\n        console.error('[App] Service worker registration failed', err)\n      );\n  } else {\n    console.error('[App] Service Worker API is not supported in current browser');\n  }\n}\n"],"sourceRoot":""}